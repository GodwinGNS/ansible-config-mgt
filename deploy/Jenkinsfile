
pipeline {
    agent any

    environment {
        ANSIBLE_CONFIG = "${WORKSPACE}/deploy/ansible.cfg"
        ANSIBLE_HOST_KEY_CHECKING = 'False'
    }

    stages {
        stage('Initial Cleanup') {
            dir("${WORKSPACE}") {
              deleteDir()
            }
        }

        stage('Checkout SCM') {
            steps {
                git branch: 'main', url: 'https://github.com/GodwinGNS/ansible-config-mgt.git'
            }
        }

        stage('Prepare Ansible for Execution') {
            steps {
                script {
                    echo "Workspace is ${WORKSPACE}"
                    sh 'ls -la ${WORKSPACE}/deploy'
                    if (fileExists("${ANSIBLE_CONFIG}")) {
                        sh "sed -i '3 a roles_path=${WORKSPACE}/roles' ${ANSIBLE_CONFIG}"
                    } else {
                        error "File ${ANSIBLE_CONFIG} does not exist"
                    }
                }
            }
        }

        stage('Test SSH Connections') {
            steps {
                script {
                    def hosts = [
                            ip: '172.31.118.13', user: 'ec2-user',
                            ip: '172.31.82.43', user: 'ubuntu',
                            ip: '172.31.104.185', user: 'ubuntu'
                    ]
                    for (host in hosts) {
                        sshagent(['private-key']) {
                            sh "ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/dev.pem ${host.user}@${host.ip} exit"
                        }
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                sshagent(['private-key']) {
                   ansiblePlaybook become: true, colorized: true, credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory/dev.yml', playbook: 'playbooks/site.yml', vaultTmpPath: ''
                }
          }
        }

        stage('Clean Workspace') {
            steps {
                cleanWs(
                    cleanWhenAborted: true, 
                    cleanWhenFailure: true, 
                    cleanWhenNotBuilt: true, 
                    cleanWhenUnstable: true, 
                    deleteDirs: true
                )
            }
        }
       
        parameters {
            string(
                name: 'inventory',
                defaultValue: 'dev',
                description: 'This is the inventory file for the environment to deploy configuration'
            )
        }
    }
}
