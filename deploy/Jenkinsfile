
// pipeline {
//     agent any

//     environment {
//         ANSIBLE_CONFIG = "${WORKSPACE}/deploy/ansible.cfg"
//         ANSIBLE_HOST_KEY_CHECKING = 'False'
//     }

//     stages {
//         stage('Initial Cleanup') {
//             dir("${WORKSPACE}") {
//               deleteDir()
//             }
//         }

//         stage('Checkout SCM') {
//             steps {
//                 git branch: 'main', url: 'https://github.com/GodwinGNS/ansible-config-mgt.git'
//             }
//         }

//         stage('Prepare Ansible for Execution') {
//             steps {
//                 script {
//                     echo "Workspace is ${WORKSPACE}"
//                     sh 'ls -la ${WORKSPACE}/deploy'
//                     if (fileExists("${ANSIBLE_CONFIG}")) {
//                         sh "sed -i '3 a roles_path=${WORKSPACE}/roles' ${ANSIBLE_CONFIG}"
//                     } else {
//                         error "File ${ANSIBLE_CONFIG} does not exist"
//                     }
//                 }
//             }
//         }

//         stage('Test SSH Connections') {
//             steps {
//                 script {
//                     def hosts = [
//                             ip: '172.31.118.13', user: 'ec2-user',
//                             ip: '172.31.82.43', user: 'ubuntu',
//                             ip: '172.31.104.185', user: 'ubuntu'
//                     ]
//                     for (host in hosts) {
//                         sshagent(['private-key']) {
//                             sh "ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/dev.pem ${host.user}@${host.ip} exit"
//                         }
//                     }
//                 }
//             }
//         }

//         stage('Run Ansible Playbook') {
//             steps {
//                 sshagent(['private-key']) {
//                    ansiblePlaybook become: true, colorized: true, credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory/dev.yml', playbook: 'playbooks/site.yml', vaultTmpPath: ''
//                 }
//           }
//         }

//         stage('Clean Workspace') {
//             steps {
//                 cleanWs(
//                     cleanWhenAborted: true, 
//                     cleanWhenFailure: true, 
//                     cleanWhenNotBuilt: true, 
//                     cleanWhenUnstable: true, 
//                     deleteDirs: true
//                 )
//             }
//         }
       
//         parameters {
//             string(
//                 name: 'inventory',
//                 defaultValue: 'dev',
//                 description: 'This is the inventory file for the environment to deploy configuration'
//             )
//         }
//     }
// }


// pipeline {
//   agent any

//   environment {
//       ANSIBLE_CONFIG="${WORKSPACE}/deploy/ansible.cfg"
//     }
    
//   stages{
//       stage("Initial cleanup") {
//           steps {
//             dir("${WORKSPACE}") {
//               deleteDir()
//             }
//           }
//         }

//       stage('Checkout SCM') {
//          steps{
//             git branch: 'feature/jenkinspipeline-stages', url: 'https://github.com/GodwinGNS/ansible-config-mgt.git'
//          }
//        }

//       stage('Prepare Ansible For Execution') {
//         steps {
//           sh 'echo ${WORKSPACE}' 
//           sh 'sed -i "3 a roles_path=${WORKSPACE}/roles" ${WORKSPACE}/deploy/ansible.cfg'  
//         }
//      }

//       stage('Run Ansible playbook') {
//         steps {
//            ansiblePlaybook become: true, colorized: true, credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory/dev.yml', playbook: 'playbook/site.yml', vaultTmpPath: ''
//          }
//       }

//       stage('Clean Workspace after build'){
//         steps{
//           cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenUnstable: true, deleteDirs: true)
//         }
//       }
//    }

// }

pipeline {
  agent any

  environment {
    ANSIBLE_CONFIG = "${WORKSPACE}/deploy/ansible.cfg"
    ANSIBLE_HOST_KEY_CHECKING = 'False'
  }

  parameters {
    string(name: 'inventory', defaultValue: 'dev', description: 'The inventory file for the environment to deploy configuration')
  }

  stages {
    stage("Initial cleanup") {
      steps {
        dir("${WORKSPACE}") {
          deleteDir()
        }
      }
    }

    stage('Checkout SCM') {
      steps {
        git branch: 'main', url: 'https://github.com/GodwinGNS/ansible-config-mgt.git'
      }
    }

    stage('Prepare Ansible For Execution') {
      steps {
        sh 'echo ${WORKSPACE}'
        sh 'sed -i "3 a roles_path=${WORKSPACE}/roles" ${WORKSPACE}/deploy/ansible.cfg'
      }
    }
ip: '172.31.118.13', user: 'ec2-user',

    stage('Test SSH Connections') {
      steps {
        script {
          def hosts = [
            //  [group: 'sonarqube', ip: '172.31.20.50', user: 'ubuntu']
             [group: 'tooling', ip: '172.31.118.13', user: 'ec2-user'],
            // [group: 'todo', ip: '172.31.29.163', user: 'ec2-user'],
             [group: 'nginx', ip: '172.31.82.43', user: 'ubuntu'],
             [group: 'db', ip: '172.31.104.185', user: 'ubuntu']
            // [group: 'artifactory', ip: '172.31.30.88', user: 'ubuntu'],
            //  [group: 'wireshark', ip: '172.31.17.28', user: 'ubuntu']
          ]
          for (host in hosts) {
            sshagent(['private-key']) {
              sh "ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/dev.pem ${host.user}@${host.ip} exit"
            }
          }
        }
      }
    }

    stage('Run Ansible playbook') {
      steps {
        sshagent(['private-key']) {
          ansiblePlaybook(
            become: true,
            credentialsId: 'private-key',
            disableHostKeyChecking: true,
            installation: 'ansible',
            inventory: "${WORKSPACE}/inventory/dev.yml",
            playbook: "${WORKSPACE}/playbooks/site.yml",
            // tags: "${params.ansible_tags}"
          )
        }
      }
    }

    stage('Clean Workspace after build') {
      steps {
        cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenUnstable: true, deleteDirs: true)
      }
    }
  }
}